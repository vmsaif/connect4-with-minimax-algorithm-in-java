name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  FILE_NAME: Connect4
  OUT_DIR: out

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Compile and Build JAR
      run: |
        mkdir ${{ env.OUT_DIR }}
        javac -d ${{ env.OUT_DIR }} src/*.java
        jar cvfm ${{ env.OUT_DIR }}/${{ env.FILE_NAME }}.jar customManifest.txt -C ${{ env.OUT_DIR }} ./

    - name: Upload JAR as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.FILE_NAME }}-jar
        path: ${{ env.OUT_DIR }}/${{ env.FILE_NAME }}.jar

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}

  windows_build:
    needs: build
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download JAR from artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.FILE_NAME }}-jar
        path: ${{ env.OUT_DIR }}

    - name: Setup Java 16
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'temurin'

    - name: Create Standalone for Windows
      run: jpackage --input ${{ env.OUT_DIR }} --name ${{ env.FILE_NAME }} --main-jar ${{ env.FILE_NAME }}.jar --main-class src.App --type exe --dest .
    - name: Attach Windows Standalone to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.release_upload_url }}
        asset_path: ./${{ env.FILE_NAME }}.exe
        asset_name: ${{ env.FILE_NAME }}-Windows.exe
        asset_content_type: application/octet-stream

  # Repeat similar steps for MacOS and Ubuntu

  macos_build:
    needs: build
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download JAR from artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.FILE_NAME }}-jar
        path: ${{ env.OUT_DIR }}

    - name: Setup Java 16
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'temurin'

    - name: Create Standalone for MacOS
      run: jpackage --input ${{ env.OUT_DIR }} --name ${{ env.FILE_NAME }} --main-jar ${{ env.FILE_NAME }}.jar --main-class src.App --type dmg --dest .
    - name: Attach MacOS Standalone to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.release_upload_url }}
        asset_path: ./${{ env.FILE_NAME }}.dmg
        asset_name: ${{ env.FILE_NAME }}-MacOS.dmg
        asset_content_type: application/octet-stream

  ubuntu_build:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download JAR from artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.FILE_NAME }}-jar
        path: ${{ env.OUT_DIR }}

    - name: Setup Java 16
      uses: actions/setup-java@v2
      with:
        java-version: '16'
        distribution: 'temurin'

    - name: Create Standalone for Ubuntu
      run: jpackage --input ${{ env.OUT_DIR }} --name ${{ env.FILE_NAME }} --main-jar ${{ env.FILE_NAME }}.jar --main-class src.App --type deb --dest .

    - name: List directory contents
      run: ls -al
    
    - name: Print current working directory
      run: pwd

    
    - name: Attach Ubuntu Standalone to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.release_upload_url }}
        asset_path: ./${{ env.FILE_NAME }}.deb
        asset_name: ${{ env.FILE_NAME }}-Ubuntu.deb
        asset_content_type: application/octet-stream
